{"version":3,"sources":["index.js"],"names":["Square","props","className","focus","onClick","value","r","c","Board","i","highlight","winningLine","this","winnerLine","pos","length","key","squares","row","j","push","renderSquare","React","Component","Game","state","history","Array","fill","location","stepNumber","xIsNext","slice","calculateWinner","setState","concat","col","step","status","current","winner","moves","map","move","moveLocation","desc","jumpTo","player","foundEmpty","isBoardFull","line","handleClick","lines","a","b","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3126eecb.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n        <button\n            className={props.focus ? \"winning-square\" : \"square\"}\n            onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nconst r = [0, 0, 0, 1, 1, 1, 2, 2, 2];\nconst c = [0, 1, 2, 0, 1, 2, 0, 1, 2];\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        // Determine whether to render the square as a winning square.\n        let highlight = false;\n        const winningLine = this.props.winnerLine;\n        if (winningLine) {\n            for (let pos = 0; pos < winningLine.length; pos++) {\n                if (winningLine[pos] === i) {\n                    highlight = true;\n                    break;\n                }\n            }\n        }\n        return (\n            <Square key={i}\n                value={this.props.squares[i]}\n                focus={highlight}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    render() {\n        // Render the board in a for-loop fashion.\n        const squares = [];\n        for (let i = 0; i < 3; i++) {\n            const row = [];\n            for (let j = 0; j < 3; j++) {\n                row.push(this.renderSquare(3 * i + j));\n            }\n            squares.push(\n                <div key={i} className=\"board-row\">\n                    {row}\n                </div>\n            );\n        }\n        return (\n            <div>\n                {squares}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n                location: null,\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        // Return early if game is already won OR square is already filled.\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                location: {\n                    row: r[i],\n                    col: c[i],\n                },\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    render() {\n        // Use most recent history entry to determine and display current board.\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n\n        // Determine the winner of the current board.\n        const winner = calculateWinner(current.squares);\n\n        // Map history of moves to buttons on the screen.\n        const moves = history.map((step, move) => {\n            const moveLocation = move ? ' (' + history[move].location.col + ',' + history[move].location.row + ')' : null;\n            const desc = move ? 'Go to move #' + move + moveLocation : 'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>\n                        {move === this.state.stepNumber ? <b>{desc}</b> : desc}\n                    </button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner.player;\n        } else if (isBoardFull(current.squares)) {\n            status = 'It\\'s a tie!';\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        winnerLine={winner ? winner.line : null}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n// ========================================\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return {\n                player: squares[a],\n                line: lines[i],\n            }\n        }\n    }\n    return null;\n}\n\nfunction isBoardFull(squares) {\n    let foundEmpty = false;\n    for (let i = 0; i < squares.length; i++) {\n        if (squares[i] === null) {\n            foundEmpty = true;\n            break;\n        }\n    }\n    return !foundEmpty;\n}"],"sourceRoot":""}