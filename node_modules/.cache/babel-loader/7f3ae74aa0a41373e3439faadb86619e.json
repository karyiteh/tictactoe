{"ast":null,"code":"import _slicedToArray from\"/home/kaiteh/microsoft/tictactoe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/home/kaiteh/microsoft/tictactoe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/kaiteh/microsoft/tictactoe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/kaiteh/microsoft/tictactoe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/kaiteh/microsoft/tictactoe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import ReactDOM from'react-dom';import'./index.css';function Square(props){return/*#__PURE__*/React.createElement(\"button\",{className:props.focus?\"winning-square\":\"square\",onClick:props.onClick},props.value);}var r=[0,0,0,1,1,1,2,2,2];var c=[0,1,2,0,1,2,0,1,2];var Board=/*#__PURE__*/function(_React$Component){_inherits(Board,_React$Component);var _super=_createSuper(Board);function Board(){_classCallCheck(this,Board);return _super.apply(this,arguments);}_createClass(Board,[{key:\"renderSquare\",value:function renderSquare(i){var _this=this;// Determine whether to render the square as a winning square.\nvar highlight=false;var winningLine=this.props.winnerLine;if(winningLine){for(var pos=0;pos<winningLine.length;pos++){if(winningLine[pos]===i){highlight=true;break;}}}return/*#__PURE__*/React.createElement(Square,{key:i,value:this.props.squares[i],focus:highlight,onClick:function onClick(){return _this.props.onClick(i);}});}},{key:\"render\",value:function render(){// Render the board in a for-loop fashion.\nvar squares=[];for(var i=0;i<3;i++){var row=[];for(var j=0;j<3;j++){row.push(this.renderSquare(3*i+j));}squares.push(/*#__PURE__*/React.createElement(\"div\",{key:i,className:\"board-row\"},row));}return/*#__PURE__*/React.createElement(\"div\",null,squares);}}]);return Board;}(React.Component);var Game=/*#__PURE__*/function(_React$Component2){_inherits(Game,_React$Component2);var _super2=_createSuper(Game);function Game(props){var _this2;_classCallCheck(this,Game);_this2=_super2.call(this,props);_this2.state={history:[{squares:Array(9).fill(null),location:null}],stepNumber:0,xIsNext:true};return _this2;}_createClass(Game,[{key:\"handleClick\",value:function handleClick(i){var history=this.state.history.slice(0,this.state.stepNumber+1);var current=history[history.length-1];var squares=current.squares.slice();// Return early if game is already won OR square is already filled.\nif(calculateWinner(squares)||squares[i]){return;}squares[i]=this.state.xIsNext?'X':'O';this.setState({history:history.concat([{squares:squares,location:{row:r[i],col:c[i]}}]),stepNumber:history.length,xIsNext:!this.state.xIsNext});}},{key:\"jumpTo\",value:function jumpTo(step){this.setState({stepNumber:step,xIsNext:step%2===0});}},{key:\"render\",value:function render(){var _this3=this;// Use most recent history entry to determine and display current board.\nvar history=this.state.history;var current=history[this.state.stepNumber];// Determine the winner of the current board.\nvar winner=calculateWinner(current.squares);// Map history of moves to buttons on the screen.\nvar moves=history.map(function(step,move){var moveLocation=move?' ('+history[move].location.col+','+history[move].location.row+')':null;var desc=move?'Go to move #'+move+moveLocation:'Go to game start';return/*#__PURE__*/React.createElement(\"li\",{key:move},/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return _this3.jumpTo(move);}},move===_this3.state.stepNumber?/*#__PURE__*/React.createElement(\"b\",null,desc):desc));});var status;if(winner){status='Winner: '+winner.player;}else if(isBoardFull(current.squares)){status='It\\'s a tie!';}else{status='Next player: '+(this.state.xIsNext?'X':'O');}return/*#__PURE__*/React.createElement(\"div\",{className:\"game\"},/*#__PURE__*/React.createElement(\"div\",{className:\"game-board\"},/*#__PURE__*/React.createElement(Board,{squares:current.squares,winnerLine:winner?winner.line:null,onClick:function onClick(i){return _this3.handleClick(i);}})),/*#__PURE__*/React.createElement(\"div\",{className:\"game-info\"},/*#__PURE__*/React.createElement(\"div\",null,status),/*#__PURE__*/React.createElement(\"ol\",null,moves)));}}]);return Game;}(React.Component);// ========================================\nReactDOM.render(/*#__PURE__*/React.createElement(Game,null),document.getElementById('root'));// ========================================\nfunction calculateWinner(squares){var lines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];for(var i=0;i<lines.length;i++){var _lines$i=_slicedToArray(lines[i],3),a=_lines$i[0],b=_lines$i[1],_c=_lines$i[2];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[_c]){return{player:squares[a],line:lines[i]};}}return null;}function isBoardFull(squares){var foundEmpty=false;for(var i=0;i<squares.length;i++){if(squares[i]===null){foundEmpty=true;break;}}return!foundEmpty;}","map":{"version":3,"sources":["/home/kaiteh/microsoft/tictactoe/src/index.js"],"names":["React","ReactDOM","Square","props","focus","onClick","value","r","c","Board","i","highlight","winningLine","winnerLine","pos","length","squares","row","j","push","renderSquare","Component","Game","state","history","Array","fill","location","stepNumber","xIsNext","slice","current","calculateWinner","setState","concat","col","step","winner","moves","map","move","moveLocation","desc","jumpTo","status","player","isBoardFull","line","handleClick","render","document","getElementById","lines","a","b","foundEmpty"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n        <button\n            className={props.focus ? \"winning-square\" : \"square\"}\n            onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nconst r = [0, 0, 0, 1, 1, 1, 2, 2, 2];\nconst c = [0, 1, 2, 0, 1, 2, 0, 1, 2];\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        // Determine whether to render the square as a winning square.\n        let highlight = false;\n        const winningLine = this.props.winnerLine;\n        if (winningLine) {\n            for (let pos = 0; pos < winningLine.length; pos++) {\n                if (winningLine[pos] === i) {\n                    highlight = true;\n                    break;\n                }\n            }\n        }\n        return (\n            <Square key={i}\n                value={this.props.squares[i]}\n                focus={highlight}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    render() {\n        // Render the board in a for-loop fashion.\n        const squares = [];\n        for (let i = 0; i < 3; i++) {\n            const row = [];\n            for (let j = 0; j < 3; j++) {\n                row.push(this.renderSquare(3 * i + j));\n            }\n            squares.push(\n                <div key={i} className=\"board-row\">\n                    {row}\n                </div>\n            );\n        }\n        return (\n            <div>\n                {squares}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n                location: null,\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        // Return early if game is already won OR square is already filled.\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                location: {\n                    row: r[i],\n                    col: c[i],\n                },\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    render() {\n        // Use most recent history entry to determine and display current board.\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n\n        // Determine the winner of the current board.\n        const winner = calculateWinner(current.squares);\n\n        // Map history of moves to buttons on the screen.\n        const moves = history.map((step, move) => {\n            const moveLocation = move ? ' (' + history[move].location.col + ',' + history[move].location.row + ')' : null;\n            const desc = move ? 'Go to move #' + move + moveLocation : 'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>\n                        {move === this.state.stepNumber ? <b>{desc}</b> : desc}\n                    </button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner.player;\n        } else if (isBoardFull(current.squares)) {\n            status = 'It\\'s a tie!';\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        winnerLine={winner ? winner.line : null}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n// ========================================\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return {\n                player: squares[a],\n                line: lines[i],\n            }\n        }\n    }\n    return null;\n}\n\nfunction isBoardFull(squares) {\n    let foundEmpty = false;\n    for (let i = 0; i < squares.length; i++) {\n        if (squares[i] === null) {\n            foundEmpty = true;\n            break;\n        }\n    }\n    return !foundEmpty;\n}"]},"metadata":{},"sourceType":"module"}