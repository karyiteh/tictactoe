{"ast":null,"code":"var _jsxFileName = \"/home/kaiteh/microsoft/tictactoe/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: props.focus ? \"winning-square\" : \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }\n  }, props.value);\n}\n\nconst r = [0, 0, 0, 1, 1, 1, 2, 2, 2];\nconst c = [0, 1, 2, 0, 1, 2, 0, 1, 2];\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    // Determine whether to render the square as a winning square.\n    let highlight = false;\n    const winningLine = this.props.winnerLine;\n\n    if (winningLine) {\n      for (let pos = 0; pos < winningLine.length; pos++) {\n        if (winningLine[pos] === i) {\n          highlight = true;\n          break;\n        }\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(Square, {\n      key: i,\n      value: this.props.squares[i],\n      focus: highlight,\n      onClick: () => this.props.onClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    });\n  }\n\n  render() {\n    // Render the board in a for-loop fashion.\n    const squares = [];\n\n    for (let i = 0; i < 3; i++) {\n      const row = [];\n\n      for (let j = 0; j < 3; j++) {\n        row.push(this.renderSquare(3 * i + j));\n      }\n\n      squares.push( /*#__PURE__*/React.createElement(\"div\", {\n        key: i,\n        className: \"board-row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }\n      }, row));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, squares);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        location: null\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice(); // Return early if game is already won OR square is already filled.\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        location: {\n          row: r[i],\n          col: c[i]\n        }\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    // Use most recent history entry to determine and display current board.\n    const history = this.state.history;\n    const current = history[this.state.stepNumber]; // Determine the winner of the current board.\n\n    const winner = calculateWinner(current.squares); // Map history of moves to buttons on the screen.\n\n    const moves = history.map((step, move) => {\n      const moveLocation = move ? ' (' + history[move].location.col + ',' + history[move].location.row + ')' : null;\n      const desc = move ? 'Go to move #' + move + moveLocation : 'Go to game start';\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: move,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.jumpTo(move),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }\n      }, move === this.state.stepNumber ? /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 59\n        }\n      }, desc) : desc));\n    });\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner.player;\n    } else if (isBoardFull(current.squares)) {\n      status = 'It\\'s a tie!';\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: current.squares,\n      winnerLine: winner ? winner.line : null,\n      onClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }\n    }, status), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }\n    }, moves)));\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Game, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }\n}), document.getElementById('root')); // ========================================\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        player: squares[a],\n        line: lines[i]\n      };\n    }\n  }\n\n  return null;\n}\n\nfunction isBoardFull(squares) {\n  let foundEmpty = false;\n\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] === null) {\n      foundEmpty = true;\n      break;\n    }\n  }\n\n  return !foundEmpty;\n}","map":{"version":3,"sources":["/home/kaiteh/microsoft/tictactoe/src/index.js"],"names":["React","ReactDOM","Square","props","focus","onClick","value","r","c","Board","Component","renderSquare","i","highlight","winningLine","winnerLine","pos","length","squares","render","row","j","push","Game","constructor","state","history","Array","fill","location","stepNumber","xIsNext","handleClick","slice","current","calculateWinner","setState","concat","col","jumpTo","step","winner","moves","map","move","moveLocation","desc","status","player","isBoardFull","line","document","getElementById","lines","a","b","foundEmpty"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n        <button\n            className={props.focus ? \"winning-square\" : \"square\"}\n            onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nconst r = [0, 0, 0, 1, 1, 1, 2, 2, 2];\nconst c = [0, 1, 2, 0, 1, 2, 0, 1, 2];\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        // Determine whether to render the square as a winning square.\n        let highlight = false;\n        const winningLine = this.props.winnerLine;\n        if (winningLine) {\n            for (let pos = 0; pos < winningLine.length; pos++) {\n                if (winningLine[pos] === i) {\n                    highlight = true;\n                    break;\n                }\n            }\n        }\n        return (\n            <Square key={i}\n                value={this.props.squares[i]}\n                focus={highlight}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    render() {\n        // Render the board in a for-loop fashion.\n        const squares = [];\n        for (let i = 0; i < 3; i++) {\n            const row = [];\n            for (let j = 0; j < 3; j++) {\n                row.push(this.renderSquare(3 * i + j));\n            }\n            squares.push(\n                <div key={i} className=\"board-row\">\n                    {row}\n                </div>\n            );\n        }\n        return (\n            <div>\n                {squares}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n                location: null,\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        // Return early if game is already won OR square is already filled.\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                location: {\n                    row: r[i],\n                    col: c[i],\n                },\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    render() {\n        // Use most recent history entry to determine and display current board.\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n\n        // Determine the winner of the current board.\n        const winner = calculateWinner(current.squares);\n\n        // Map history of moves to buttons on the screen.\n        const moves = history.map((step, move) => {\n            const moveLocation = move ? ' (' + history[move].location.col + ',' + history[move].location.row + ')' : null;\n            const desc = move ? 'Go to move #' + move + moveLocation : 'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>\n                        {move === this.state.stepNumber ? <b>{desc}</b> : desc}\n                    </button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner.player;\n        } else if (isBoardFull(current.squares)) {\n            status = 'It\\'s a tie!';\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        winnerLine={winner ? winner.line : null}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n// ========================================\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return {\n                player: squares[a],\n                line: lines[i],\n            }\n        }\n    }\n    return null;\n}\n\nfunction isBoardFull(squares) {\n    let foundEmpty = false;\n    for (let i = 0; i < squares.length; i++) {\n        if (squares[i] === null) {\n            foundEmpty = true;\n            break;\n        }\n    }\n    return !foundEmpty;\n}"]},"metadata":{},"sourceType":"module"}